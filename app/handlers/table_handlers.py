import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from app.models.config.main import BotConfig
from app.services.rate_service import RateService
from app.keyboards.main_menu import get_main_keyboard

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
user_last_table_message = {}

user_last_table_message = {}


@router.message(Command("start"))
async def table_start(message: Message, session: AsyncSession, config: BotConfig):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–æ"""
    try:
        rate_service = RateService(session)
        message_text = await rate_service.format_rate_message()

        user_id = message.from_user.id

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç–∞–±–ª–æ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if user_id in user_last_table_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_table_message[user_id],
                    text=message_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
                logger.info(f"‚úèÔ∏è –¢–∞–±–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            except Exception as e:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                del user_last_table_message[user_id]
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–æ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = await message.answer(
            message_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        user_last_table_message[user_id] = new_message.message_id
        logger.info(f"üìÑ –ù–æ–≤–æ–µ —Ç–∞–±–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–æ: {e}")
@router.callback_query(F.data == "update_rate")
async def update_rate_handler(callback: CallbackQuery, session: AsyncSession, config: BotConfig):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å'"""
    try:
        from app.services.queue_service import QueueService
        from app.services.notification_service import NotificationService

        queue_service = QueueService(session)
        notification_service = NotificationService(callback.bot, config)

        username = callback.from_user.username or callback.from_user.full_name
        success, queue_size = await queue_service.add_to_queue(callback.from_user.id, username)

        if success:
            await notification_service.notify_admins_queue_full()

            if queue_size >= 3:
                message = "‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω"
            else:
                message = f"‚úÖ –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏! –û–∂–∏–¥–∞—é—â–∏—Ö: {queue_size}/3"
        else:
            message = "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!"

        await callback.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await callback.answer("üîÑ –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)


@router.callback_query(F.data == "fix_rate")
async def fix_rate_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å'"""
    await callback.answer("üìä –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)