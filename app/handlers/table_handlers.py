from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.services.notification_service import NotificationService
from app.services.rate_service import RateService  # –û–¥–∏–Ω –∫—É—Ä—Å
from app.services.multi_rate_service import MultiRateService  # –ú—É–ª—å—Ç–∏–∫—É—Ä—Å—ã
from app.keyboards.main_menu import get_main_keyboard
from app.config.main import BotConfig
import logging

logger = logging.getLogger(__name__)


logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
user_last_table_message = {}

user_last_table_message = {}


@router.message(Command("start"))
async def table_start(message: Message, session: AsyncSession, config: BotConfig):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–æ —Å –º—É–ª—å—Ç–∏–∫—É—Ä—Å–∞–º–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MultiRateService –≤–º–µ—Å—Ç–æ RateService
        multi_service = MultiRateService(session)
        message_text = await multi_service.format_multi_rate_message()

        user_id = message.from_user.id

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç–∞–±–ª–æ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if user_id in user_last_table_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_table_message[user_id],
                    text=message_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ Markdown –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                )
                logger.info(f"‚úèÔ∏è –¢–∞–±–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            except Exception as e:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                del user_last_table_message[user_id]
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–æ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = await message.answer(
            message_text,
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ Markdown –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        )
        user_last_table_message[user_id] = new_message.message_id
        logger.info(f"üìÑ –ù–æ–≤–æ–µ —Ç–∞–±–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤")

@router.callback_query(F.data == "update_rate")
async def update_rate_handler(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å'"""
    try:
        from app.services.queue_service import QueueService
        from app.services.notification_service import NotificationService

        queue_service = QueueService(session)
        # –ü–µ—Ä–µ–¥–∞–µ–º session –≤ NotificationService
        notification_service = NotificationService(callback.bot, session)

        username = callback.from_user.username or callback.from_user.full_name
        success, queue_size = await queue_service.add_to_queue(callback.from_user.id, username)

        if success:
            # –ü–µ—Ä–µ–¥–∞–µ–º session –≤ –º–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notification_service.notify_admins_queue_full(session)

            if queue_size >= 3:
                message = "‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω"
            else:
                message = f"‚úÖ –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏! –û–∂–∏–¥–∞—é—â–∏—Ö: {queue_size}/3"
        else:
            message = "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!"

        await callback.answer(message, show_alert=True)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: %s", e)
        await callback.answer("üîÑ –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)


@router.callback_query(F.data == "fix_rate")
async def fix_rate_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å'"""
    await callback.answer("üìä –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)


@router.message(Command("new_rate"))
@router.message(F.text.regexp(r'^[A-Za-z]{3}/[A-Za-z]{3}'))
async def handle_new_rate(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_rate –∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    try:
        text = message.text.strip()
        user_id = message.from_user.id

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ new_rate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, text)

        if text == "/new_rate":
            # ... —Å–ø—Ä–∞–≤–∫–∞ ...
            return

        rate_pairs = await parse_rate_input(text)
        logger.info("–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã: %s", rate_pairs)

        if not rate_pairs:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `USD/RUB 82.80 83.30`")
            return

        multi_service = MultiRateService(session)
        results = []

        for pair_data in rate_pairs:
            pair = pair_data['pair'].upper()
            buy_rate = pair_data['buy']
            sell_rate = pair_data['sell']

            success = await multi_service.update_rate(
                pair=pair,
                buy_rate=buy_rate,
                sell_rate=sell_rate,
                admin_id=user_id
            )

            if success:
                results.append(f"‚úÖ {pair}: {buy_rate}/{sell_rate}")
            else:
                results.append(f"‚ùå {pair}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if results:
            result_text = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**\n" + "\n".join(results)
            current_rates = await multi_service.format_multi_rate_message()

            # ‚úÖ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–û–¢ –ë–õ–û–ö - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            try:
                from app.services.notification_service import NotificationService
                notification_service = NotificationService(message.bot, session)
                await notification_service.notify_queue_users_rate_updated(current_rates)
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—á–µ—Ä–µ–¥–∏")
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: %s", e)

            await message.answer(result_text)
            await message.answer(current_rates)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–∞: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def parse_rate_input(text: str):
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –∫—É—Ä—Å–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if text.startswith('/new_rate'):
            text = text.replace('/new_rate', '').strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –∑–∞–ø—è—Ç—ã–º
        pairs_text = [p.strip() for p in text.split(',') if p.strip()]

        results = []

        for pair_text in pairs_text:
            # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
            normalized = pair_text.replace('/', ' ').replace('-', ' ').replace(',', ' ')
            # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
            normalized = normalized.replace(',', '.')
            parts = [p for p in normalized.split() if p]

            if len(parts) < 3:
                continue

            # –ü–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏: –≤–∞–ª—é—Ç–∞1, –≤–∞–ª—é—Ç–∞2, –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏
            currency1 = parts[0].upper()
            currency2 = parts[1].upper()
            pair = f"{currency1}/{currency2}"

            try:
                buy_rate = float(parts[2].replace(',', '.'))  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                # –ï—Å–ª–∏ –µ—Å—Ç—å 4-—è —á–∞—Å—Ç—å - –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
                if len(parts) >= 4:
                    sell_rate = float(parts[3].replace(',', '.'))  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                else:
                    sell_rate = buy_rate * 1.01  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–µ–¥ 1%

                results.append({
                    'pair': pair,
                    'buy': buy_rate,
                    'sell': sell_rate
                })

            except ValueError as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞: %s", e)
                continue

        return results

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %s", e)
        return []


@router.callback_query(F.data == "refresh_table")
async def refresh_table_handler(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–æ"""
    try:
        multi_service = MultiRateService(session)
        message_text = await multi_service.format_multi_rate_message()

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –¢–∞–±–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–æ: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")


@router.message(Command("remove_rate"))
async def remove_rate_handler(message: Message, session: AsyncSession):
    """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä—É –∏–∑ —Ç–∞–±–ª–æ"""
    try:
        text = message.text.replace('/remove_rate', '').strip().upper()
        if not text:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É: /remove_rate USD/RUB")
            return

        multi_service = MultiRateService(session)
        success = await multi_service.remove_rate(text)

        if success:
            await message.answer(f"‚úÖ –ü–∞—Ä–∞ {text} —É–¥–∞–ª–µ–Ω–∞ —Å —Ç–∞–±–ª–æ")
        else:
            await message.answer(f"‚ùå –ü–∞—Ä–∞ {text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—ã: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


@router.message(Command("clear_rates"))
async def clear_rates_handler(message: Message, session: AsyncSession):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã —Å —Ç–∞–±–ª–æ"""
    try:
        multi_service = MultiRateService(session)
        success = await multi_service.clear_all_rates()

        if success:
            await message.answer("‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—É—Ä—Å–æ–≤: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")