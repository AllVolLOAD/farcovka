import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from app.models.config.main import BotConfig
from app.services.rate_service import RateService
from app.keyboards.main_menu import get_main_keyboard

logger = logging.getLogger(__name__)


# –†–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_table_router():
    router = Router(name="table_router")

    @router.message(Command("start"))
    async def table_start(message: Message, session: AsyncSession, config: BotConfig):
        logger.info(f"üéØ TABLE START from user {message.from_user.id}")
        try:
            rate_service = RateService(session)
            message_text = await rate_service.format_rate_message()
            await message.answer(message_text, reply_markup=get_main_keyboard())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            await message.answer("üè¶ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 95.50 RUB\n\n(—Ä–µ–∂–∏–º –±–µ–∑ –ë–î)", reply_markup=get_main_keyboard())

    @router.callback_query(F.data == "update_rate")
    async def table_update_rate(
            callback: CallbackQuery,
            session: AsyncSession,
            config: BotConfig
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å' —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            from app.services.queue_service import QueueService
            from app.services.notification_service import NotificationService

            queue_service = QueueService(session)
            notification_service = NotificationService(callback.bot, config)

            username = callback.from_user.username or callback.from_user.full_name
            success, queue_size = await queue_service.add_to_queue(
                callback.from_user.id,
                username
            )

            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
                await notification_service.notify_admins_queue_full()

                if queue_size >= 3:
                    await callback.answer(
                        f"‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å–æ–∑–Ω–∞–µ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –≤—ã –Ω–µ –æ–¥–∏–Ω –∂–¥–µ—Ç–µ",
                        show_alert=True
                    )
                else:
                    await callback.answer(
                        f"‚úÖ –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏! –û–∂–∏–¥–∞—é—â–∏—Ö: {queue_size}/3",
                        show_alert=True
                    )
            else:
                await callback.answer(
                    "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏! –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                    show_alert=True
                )


        except Exception as e:

            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")

            try:

                await callback.message.answer("üîÑ –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

            except:

                pass


    @router.callback_query(F.data == "fix_rate")
    async def table_fix_rate(callback: CallbackQuery, session: AsyncSession):
        await callback.answer("üìä –ö—É—Ä—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!", show_alert=True)

    @router.message(Command("debug_config"))
    async def debug_config(message: Message, config: BotConfig):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        superusers = getattr(config, 'superusers', [])
        await message.answer(
            f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:</b>\n"
            f"üëë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {superusers}\n"
            f"üìä –¢–∏–ø: {type(superusers)}",
            parse_mode="HTML"
        )

    @router.message(Command("myid"))
    async def get_my_id(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ ID"""
        await message.answer(
            f"üÜî –í–∞—à Telegram ID: <code>{message.from_user.id}</code>\n"
            f"üìõ Username: @{message.from_user.username or '–Ω–µ—Ç'}\n"
            f"üë§ –ò–º—è: {message.from_user.full_name}",
            parse_mode="HTML"
        )

    @router.message(Command("admin_info"))
    async def admin_info(message: Message, config: BotConfig):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥–º–∏–Ω–∞—Ö"""
        superusers = getattr(config, 'superusers', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
        await message.answer(
            f"üëë Superusers: {superusers}\n"
            f"üÜî –¢–≤–æ–π ID: {message.from_user.id}",
            parse_mode="HTML"
        )

    return router