import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from app.keyboards.main_menu import get_main_keyboard

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
admin_router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id: int) -> bool:
    admin_ids = [7111883883, 780245577]
    return user_id in admin_ids


async def send_new_table_to_all_users(bot, new_rate: float, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–∞–±–ª–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        from app.services.rate_service import RateService
        from app.keyboards.main_menu import get_main_keyboard

        rate_service = RateService(session)
        message_text = await rate_service.format_rate_message()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –±—ã–ª –≤ –æ—á–µ—Ä–µ–¥–∏ (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
        from app.services.queue_service import QueueService
        queue_service = QueueService(session)
        waiting_users = await queue_service.get_waiting_users()

        sent_count = 0
        for user in waiting_users:
            try:
                await bot.send_message(
                    user.user_id,
                    message_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
                sent_count += 1
                logger.info(f"üìÑ –ù–æ–≤–æ–µ —Ç–∞–±–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        logger.info(f"üìä –ù–æ–≤—ã–µ —Ç–∞–±–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–æ: {e}")


async def update_all_user_tables(bot, new_rate: float, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from app.handlers.table_handlers import user_last_table_message
        from app.services.rate_service import RateService

        rate_service = RateService(session)
        message_text = await rate_service.format_rate_message()

        updated_count = 0
        for user_id, message_id in user_last_table_message.items():
            try:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=message_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
                updated_count += 1
                logger.info(f"‚úèÔ∏è –¢–∞–±–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {user_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–æ –¥–ª—è {user_id}: {e}")

        logger.info(f"üìä –¢–∞–±–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–æ: {e}")

async def notify_waiting_users(bot, new_rate: float, session: AsyncSession):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        from app.services.queue_service import QueueService
        queue_service = QueueService(session)
        waiting_users = await queue_service.get_waiting_users()

        notified_count = 0
        for user in waiting_users:
            try:
                await bot.send_message(
                    user.user_id,
                    f"üéâ <b>–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n–ù–æ–≤—ã–π –∫—É—Ä—Å: {new_rate} RUB",
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
                notified_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        logger.info(f"üì® –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notified_count}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@admin_router.message(F.text)
async def handle_admin_messages(message: Message, session: AsyncSession):
    if not is_admin(message.from_user.id):
        return

    text = message.text.strip()

    if text.replace('.', '').isdigit():
        try:
            new_rate = float(text)
            logger.info(f"üí∞ –ê–¥–º–∏–Ω –≤–≤–µ–ª –∫—É—Ä—Å: {new_rate}")

            from app.services.rate_service import RateService
            from app.services.queue_service import QueueService

            rate_service = RateService(session)
            success = await rate_service.update_rate(new_rate, message.from_user.id)

            if success:
                # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –î–û –æ—á–∏—Å—Ç–∫–∏
                queue_service = QueueService(session)
                waiting_users = await queue_service.get_waiting_users()

                # 2. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                await notify_waiting_users(message.bot, new_rate, session)

                # 3. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –¢–ê–ë–õ–û
                await send_new_table_to_all_users(message.bot, new_rate, session)

                # 4. –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                await queue_service.clear_queue()

                await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_rate} RUB\n–ù–æ–≤—ã–µ —Ç–∞–±–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞")

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 95.50")


def setup_admin_handlers(dp):
    dp.include_router(admin_router)
    logger.info("‚úÖ Admin handlers registered")

