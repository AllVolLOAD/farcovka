import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

logger = logging.getLogger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω"""
    admin_ids = [7111883883, 780245577]  # —Ö–∞—Ä–¥–∫–æ–¥
    return user_id in admin_ids


def setup_admin_handlers(dp):
    admin_router = Router()

    @admin_router.message(Command("admin_test"))
    async def admin_test(message: Message):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        logger.info(f"üéØ ADMIN_TEST –æ—Ç {message.from_user.id}")
        await message.answer("‚úÖ Admin handlers —Ä–∞–±–æ—Ç–∞—é—Ç!")

    @admin_router.message(F.text)
    async def handle_admin_messages(message: Message, session: AsyncSession):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
        if not is_admin(message.from_user.id):
            return

        text = message.text.strip()
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: '{text}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ (–∫—É—Ä—Å)
        if text.replace('.', '').isdigit():
            try:
                new_rate = float(text)
                logger.info(f"üí∞ –ê–¥–º–∏–Ω –≤–≤–µ–ª –∫—É—Ä—Å: {new_rate}")

                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
                await message.answer(f"‚úÖ –ö—É—Ä—Å –ø—Ä–∏–Ω—è—Ç: {new_rate} RUB (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 95.50")
        else:
            logger.info(f"‚ÑπÔ∏è –ù–µ—á–∏—Å–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: {text}")

    dp.include_router(admin_router)
    logger.info("‚úÖ Admin handlers registered")