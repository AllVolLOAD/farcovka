import logging
from typing import Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.models.multi_rate import ExchangeRate

logger = logging.getLogger(__name__)


class MultiRateService:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def update_rate(self, pair: str, rate: float, admin_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            query = select(ExchangeRate).where(ExchangeRate.pair == pair)
            existing = await self.session.scalar(query)

            if existing:
                existing.rate = rate
                existing.last_admin_id = admin_id
            else:
                new_rate = ExchangeRate(pair=pair, rate=rate, last_admin_id=admin_id)
                self.session.add(new_rate)

            await self.session.commit()
            logger.info(f"‚úÖ –ö—É—Ä—Å {pair} –æ–±–Ω–æ–≤–ª–µ–Ω: {rate}")
            return True

        except Exception as e:
            await self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ {pair}: {e}")
            return False

    async def get_rate(self, pair: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã –∏–ª–∏ 0.0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        try:
            query = select(ExchangeRate).where(ExchangeRate.pair == pair)
            rate_obj = await self.session.scalar(query)
            return rate_obj.rate if rate_obj else 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {pair}: {e}")
            return 0.0

    async def get_all_rates(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è {–ø–∞—Ä–∞: –∫—É—Ä—Å}"""
        try:
            query = select(ExchangeRate)
            result = await self.session.scalars(query)
            rates = {rate.pair: rate.rate for rate in result}
            return rates
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤: {e}")
            return {}

    async def format_multi_rate_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∫—É—Ä—Å–∞–º–∏"""
        rates = await self.get_all_rates()

        if not rates:
            return "üè¶ –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."

        message = "üè¶ **–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:**\n\n"
        for pair, rate in rates.items():
            message += f"üíµ {pair}: {rate}\n"

        message += "\n–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å' –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"
        return message