import logging
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.config.main import BotConfig

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot, session):
        self.bot = bot
        self.session = session

    async def notify_queue_users_rate_updated(self, new_rates_message: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"""
        try:
            from app.services.queue_service import QueueService
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            queue_service = QueueService(self.session)
            queue_users = await queue_service.get_queue_users()

            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –æ—á–µ—Ä–µ–¥–∏", len(queue_users))

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–æ", callback_data="refresh_table")]
            ])

            for user_id in queue_users:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ç–∞–±–ª–æ —Å –∫–Ω–æ–ø–∫–æ–π
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=new_rates_message,                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user_id)

                except Exception as e:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await queue_service.clear_queue()
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: %s", e)


    async def notify_admins_queue_full(self, session: AsyncSession):
        """–£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏"""
        try:
            from app.services.queue_service import QueueService
            from app.services.multi_rate_service import MultiRateService

            queue_service = QueueService(session)
            multi_service = MultiRateService(session)

            queue_size = await queue_service.get_queue_size()
            if queue_size < 3:
                return False

            waiting_users = await queue_service.get_waiting_users()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
            current_rates = await multi_service.get_all_rates()
            rates_text = "\n".join([f"{pair}: {rate}" for pair, rate in
                                    current_rates.items()]) if current_rates else "–ö—É—Ä—Å—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

            users_list = "\n".join([f"‚Ä¢ {user.username or '–ë–µ–∑ username'}" for user in waiting_users[:3]])

            message_text = (
                "üö® <b>–û—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                f"<b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n{rates_text}\n\n"
                f"<b>–ó–∞–ø—Ä–æ—Å—ã:</b> {len(waiting_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{users_list}\n\n"
                "üíµ <b>–û–±–Ω–æ–≤–∏—Ç–µ –∫—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–∞–º–∏:</b>\n"
                "<code>/rate_now RUB/USD 95.50</code>\n"
                "<code>/rate_now USD/USDT 0.996</code>\n\n"
                "‚ö° <b>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b> –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞"
            )

            admin_ids = [7111883883, 780245577]

            for admin_id in admin_ids:
                try:
                    await self.bot.send_message(admin_id, message_text, parse_mode="HTML")
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
            return False


    async def notify_users_rate_updated(self, new_rate: float):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"""
        # TODO: –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
        pass